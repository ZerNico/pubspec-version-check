"use strict";var __awaiter=this&&this.__awaiter||function(a,b,c,d){function e(a){return a instanceof c?a:new c(function(b){b(a)})}return new(c||(c=Promise))(function(c,f){function g(a){try{i(d.next(a))}catch(a){f(a)}}function h(a){try{i(d["throw"](a))}catch(a){f(a)}}function i(a){a.done?c(a.value):e(a.value).then(g,h)}i((d=d.apply(a,b||[])).next())})},__importStar=this&&this.__importStar||function(a){if(a&&a.__esModule)return a;var b={};if(null!=a)for(var c in a)Object.hasOwnProperty.call(a,c)&&(b[c]=a[c]);return b["default"]=a,b},__importDefault=this&&this.__importDefault||function(a){return a&&a.__esModule?a:{default:a}};Object.defineProperty(exports,"__esModule",{value:!0});const core=__importStar(require("@actions/core")),yaml_1=__importDefault(require("yaml")),axios_1=__importDefault(require("axios")),path_1=require("path"),fs_1=require("fs"),semver_diff_1=__importDefault(require("semver-diff")),semver_regex_1=__importDefault(require("semver-regex")),pubspecFileName=core.getInput("file-name")||"pubspec.yaml",dir=process.env.GITHUB_WORKSPACE||"/github/workspace",eventFile=process.env.GITHUB_EVENT_PATH||"/github/workflow/event.json",token=core.getInput("token");function main(){return __awaiter(this,void 0,void 0,function*(){const a=yield readJson(eventFile);return yield processDirectory(dir,a.commits)})}function isPubspecObj(a){return!!a&&!!a.version}function getCommit(a){return __awaiter(this,void 0,void 0,function*(){const b=`https://api.github.com/repos/${process.env.GITHUB_REPOSITORY}/commits/${a}`,c=token?{Authorization:`Bearer ${token}`}:void 0;return(yield axios_1.default.get(b,{headers:c})).data})}function checkCommits(a,b){return __awaiter(this,void 0,void 0,function*(){try{for(const c of a){const a=c.message.match(semver_regex_1.default())||[];if(a.includes(b)&&(yield checkDiff(c.id,b)))return console.log(`Found match for version ${b}: ${c.id.substring(0,7)} ${c.message}`),!0}if(core.getInput("diff-search")){console.log("No standard npm version commit found, switching to diff search (this could take more time...)");for(const c of a)if(yield checkDiff(c.id,b))return console.log(`Found match for version ${b}: ${c.id.substring(0,7)} ${c.message}`),!0}return console.log("No matching commit found."),!1}catch(a){core.setFailed(a)}})}function checkDiff(a,b){return __awaiter(this,void 0,void 0,function*(){try{const c=yield getCommit(a),d=c.files.find(a=>a.filename==pubspecFileName);if(!d)return!1;const e={},f=d.patch.split("\n").filter(a=>a.includes("\"version\":")&&["+","-"].includes(a[0]));if(2<f.length)return!1;for(const a of f)e[a.startsWith("+")?"added":"deleted"]=a;if(!e.added)return!1;const g={added:matchVersion(e.added),deleted:!!e.deleted&&matchVersion(e.deleted)};return!(g.added!=b)&&(setOutput("changed",!0),setOutput("version",b),g.deleted&&setOutput("type",semver_diff_1.default(g.deleted,g.added)),!0)}catch(a){throw console.error(`An error occurred in checkDiff:\n${a}`),new ExitError(1)}})}function matchVersion(a){return((a.match(/[0-9.]+/g)||[]).map(a=>a.match(semver_regex_1.default())).find(a=>!!a)||[])[0]}function processDirectory(a,b){return __awaiter(this,void 0,void 0,function*(){try{const c=path_1.join(a,pubspecFileName),d=yield readYaml(c).catch(()=>{Promise.reject(new NeutralExitError(`Pubspec file not found: ${c}`))});if(!isPubspecObj(d))throw new Error("Can't find version field");20<=b.length&&console.warn("This workflow run topped the commit limit set by GitHub webhooks: that means that commits could not appear and that the run could not find the version change."),yield checkCommits(b,d.version)}catch(a){core.setFailed(a)}})}function readJson(a){return __awaiter(this,void 0,void 0,function*(){const b=yield new Promise((b,c)=>fs_1.readFile(a,"utf8",(a,d)=>{a?c(a):b(d)}));return JSON.parse(b)})}function readYaml(a){return __awaiter(this,void 0,void 0,function*(){const b=yield new Promise((b,c)=>fs_1.readFile(a,"utf8",(a,d)=>{a?c(a):b(d)}));return yaml_1.default.parse(b)})}function setOutput(a,b){return core.setOutput(a,`${b}`)}class ExitError extends Error{constructor(a){super(`Command failed with code ${a}`),"number"==typeof a&&(this.code=a)}}class NeutralExitError extends Error{}require.main==module&&(console.log("Searching for version update..."),main().catch(a=>{a instanceof NeutralExitError?process.exitCode=78:(process.exitCode=1,console.error(a.message||a))}));